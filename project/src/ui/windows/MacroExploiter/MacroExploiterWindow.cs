using System;
using Godot;
using System.Collections.Generic;

namespace Game.UI
{
    public class MacroExploiterWindow : Window
    {
        public class ModulesLibrary
        {
            public delegate void ModuleStdout(XModule module, string data);

            private Dictionary<XModule, int> _modulesRefCount;
            public List<XModule> Modules;
            public ModulesLibrary()
            {
                _modulesRefCount = new Dictionary<XModule, int>();
                Modules = new List<XModule>();
            }

            public void AddModule(XModule module)
            {
                Modules.Add(module);
                if (!_modulesRefCount.ContainsKey(module))
                {
                    _modulesRefCount.Add(module, 0);
                }
                _modulesRefCount[module] += 1;
            }
            public void RemoveModule(XModule module)
            {
                Modules.Remove(module);
                if (!_modulesRefCount.ContainsKey(module)) return;
                _modulesRefCount[module] -= 1;
            }
        }

        public delegate void ConsoleContentChangeFunc(string content);
        public event ConsoleContentChangeFunc OnConsoleContentChange;

        [Export]
        public NodePath InputFieldPath;
        public CodeInput CodeInput{get{ return GetNode<CodeInput>(InputFieldPath); } }

        [Export]
        public NodePath ConsoleScreenPath;
        public RichTextLabel ConsoleScreen { get { return GetNode<RichTextLabel>(ConsoleScreenPath); } }

        public ModulesLibrary ModulesLib;

        struct CMD {
            public string help;
            public Action func;
        }
        private Dictionary<string, CMD> _actionCommands;

        public static MacroExploiterWindow Instance
        {
            get
            {
                return Global.Instance.GetUIManager().WindowsContainer?.FindWindow<MacroExploiterWindow>();
            }
        }

        public string ConsoleContent { get { return ConsoleScreen.Text; } }

        public MacroExploiterWindow(){
            ModulesLib = new ModulesLibrary();
            Global.Instance.GetXModulesServer().OnStdout += OnModuleStdout;

            _actionCommands = new Dictionary<string, CMD>
            {
                {"help", new CMD{help="print help", func=PrintHelp}},
                {"cls", new CMD{help="clear screen", func=ClearScreen}},
            };
        }

        public override void _Ready(){
            base._Ready();
        }
        public override void _EnterTree(){
            base._EnterTree();
            CodeInput.OnCodeExecute += ExecuteCode;
            CodeInput.OnFocused += OnCodeInputFocused;
        }
        public override void _ExitTree(){
            base._ExitTree();
            CodeInput.OnCodeExecute -= ExecuteCode;
            CodeInput.OnFocused -= OnCodeInputFocused;
        }
        private void OnCodeInputFocused()
        {
            GrabWindowFocus();
        }

        void OnModuleStdout(string data)
        {
            //PrintLn(String.Format("[color=#555][{0}]:[/color] {1}", module.Id, data));
            PrintLn(String.Format("[color=#999]{0}[/color]", data));
            //PrintLn(data);
        }

        public override void _Process(float delta)
        {

        }

        public void ExecuteCode(string code)
        {
            PrintLn("> " + code);
            string cmd = code.Trim().ToLower();
            if (_actionCommands.ContainsKey(cmd))
            {
                _actionCommands[cmd].func();
            }
            else
            {
                Global.Instance.GetXModulesServer().ExecuteInExploiterContext(code, ModulesLib.Modules);
                //Global.Instance.GetXModulesServer().ExecuteCode(code);
            }
        }
        public void PrintLn(string text="")
        {
            ConsoleScreen.BbcodeText += text + "\n";
            OnConsoleContentChange?.Invoke(ConsoleContent);
            //ConsoleScreen.ScrollToLine(ConsoleScreen.Text.Length);
        }
        public void ClearScreen()
        {
            ConsoleScreen.BbcodeText = "";
            OnConsoleContentChange?.Invoke(ConsoleContent);
        }
        public void PrintHelp()
        {
            PrintLn();
            foreach(string cmd in _actionCommands.Keys)
                PrintLn(cmd+" - "+_actionCommands[cmd].help);

            PrintLn();

            if (ModulesLib.Modules.Count > 0) { 
                //TODO: localize this:
                PrintLn("[available modules]:");
                foreach (XModule module in ModulesLib.Modules)
                    PrintLn("    modules." + module.Id);
            }
            else
            {
                PrintLn("[no modules available]");
            }

            PrintLn();
        }

        public override void OnFocused()
        {
            CodeInput.CallDeferred("grab_focus");
        }
    }
}